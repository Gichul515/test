
    
        git flow    
            -flow 전략은 회사마다 다르지만 그 형태는 거의 비슷


        
        hotfix (일시적) -- 버그 수정
        release (일시적) -- 새로운 버전 테스트용 (dev 클론) v2
        feature (일시적) -- 기능 추가

        dev ------------------------------------------------------------------>> (본체 클론) 항상
        main/master ---------------------------------------------------------->> (배포, 본체) 항상


-----------------------------------------------------------------------------------------------------


        git commit 컨벤션
            git에 올릴 코드를 스테이징하고 커밋을 할 시 커밋의 상태를 나타내는 메시지를
            함께 전달


            ex)
            feat : 새로운 기능 추가
            fix  : 버그수정
            docs : 문서수정
            style : 코드 포멧팅
            refactor : 코드 리펙토링
            test : 테스트 단위/코드 추가
            chore : 패키지 매니저, 빌드 수정

            => feat: 로그인 기능 추가, [feat] 로그인 기능 추가, [Add] 로그인 기능 추가
            

        issue tracker

            개발 시 발생되는 버그와 논쟁, 논점(개발자들끼리의 논쟁)
            이러한 이슈들을 기록하고 해당 이슈가 되면 이슈를 닫음으로서 (닫힌 이슈는 
            히스토리에서 확인이 가능)

            이슈 등록 시 이슈에 대한 내용과 앞에 번호를 붙여서 만들어 줌
            EX) 사용자 데이터를 받아왔으나 .... map is not function ... #10

            해당 이슈가 되면 커밋 메세지에 

            close
            closed
            fix
            fixed
            resolove

            라는 깃 컨벤션과 앞에 이슈 번호를 붙여서 커밋
            ex) close #10


            ++ github action / 이슈 등록시 자동으로 브랜치 생성 해결 시 자동 삭제

            pull request

                허락, merge 실행 시 데이터가 바로 적용되는 것이 아니라 pull request에 
                등록하고 request에 등록된 사항을 허용 해주어야 기본 branch에 push가 되는 현상
                (코드 수정했으니 검토해바 -> 팀장님 컨펌 부탁드립니다)


            merge
                새로 만들어지는 브런치와 기본 브런치를 합치는 것 

---------------------------------------------------------------------------------------------------------

        터미널 경로 명령어

        cd 경로 == > 해당 경로로 이동
        cd .. ==> 경로 상위 폴더로 이동

-------------------------------------------------------------------------------------------------------


    깃 로직 명령어

    1. git init => 숨김 폴더로 .git이라는 폴더가 생성

    2.git remote add origin "깃허브 레퍼지토리 주소"
    => 깃허브 레퍼지토리와 연결

    3.git add .
    => 해당 경로에 있는  모든 파일을 스테이징

    4. git commit -m "커밋메세지"
    => 커밋메세지 내용으로 스테이징 되어있는 파일을 깃에 저장

    5. git push <origin> <branch> / git push 대체가능
    => 깃에 커밋된 코드를 올리는 것 (밀어넣다)
    ex) git push origin master/main

    6. git pull origin <branch> / git pull
    => 깃에 업데이트 된 내용을 내려받는 것 (땡겨온다)
    => 에러를 막기위해 보통 푸쉬 전 항상 풀을 받고 진행

----------------------------------------------------------------------------------------------------------------------------


        git branch 브랜치명 (브랜치 생성)
        git checkout 브랜치명 (브랜치 focus)
        git branch -d 브랜치명 (브랜치 삭제)


        ex) 
            git branch dev (dev 브랜치 생성)
            git checkout dev (dev 브랜치 이동)
            git 

